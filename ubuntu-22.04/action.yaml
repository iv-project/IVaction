# SPDX-FileCopyrightText: 2006-2023, Knut Reinert & Freie Universität Berlin
# SPDX-FileCopyrightText: 2016-2023, Knut Reinert & MPI für molekulare Genetik
# SPDX-License-Identifier: CC0-1.0
name: "Linux"
description: "Standardized building for IV projects"

inputs:
  compiler:
    description: "which compiler to use \"gcc12-cpp20-release\", \"clang16-cpp17-debug\", etc"
    required: true
  cmake_flags:
    description: "additional cmake flags"
    required: false
    default: ""
  threads:
    description: "number of threads to use"
    required: false
    default: 1
  CODECOV_TOKEN:
    description: "codecov secret"
    required: false
    default: ""
  ctest_timeout:
    description: "ctest timeout value in seconds"
    required: false
    default: 7200

runs:
  using: 'composite'
  steps:
   - name: Checkout Repo
     uses: actions/checkout@v4
     with:
       path: repo
       submodules: recursive
       fetch-depth: 2 # Required by codecov
   - name: Install brew
     shell: bash
     run: |
       echo \"${GITHUB_ACTION}\" \"${GITHUB_REF}\" \"${GITHUB_BASE_REF}\" \"${GITHUB_RUN_NUMBER}\"
       NONINTERACTIVE=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
       eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
       echo 'eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"' > env.sh
       echo "Setup for " ${{ inputs.compiler }}
       echo "export CXX_STANDARD=20" >> env.sh
       echo "export BUILD_TYPE=Release" >> env.sh
       echo "export CMAKE_CXX_FLAGS=" >> env.sh
       echo "export CMAKE_C_FLAGS=" >> env.sh
       echo "export GCOV=gcov" >> env.sh
       echo "MODE=unknown" >> "$GITHUB_ENV"
   - name: Install tools
     shell: bash
     run: |
       source env.sh
       sudo apt-get update -y
       sudo apt-get install -y build-essential
       brew upgrade

   - name: Setup gcc 11
     if: ${{ startsWith(inputs.compiler, 'gcc11-') || (inputs.compiler == 'gcc11') }}
     shell: bash
     run: |
       source env.sh
       brew install --force-bottle gcc@11
       brew link -f gcc@11
       echo "export CXX=g++" >> env.sh
       echo "MODE=compile" >> "$GITHUB_ENV"

   - name: Setup gcc 12
     if: ${{ startsWith(inputs.compiler, 'gcc12-') || (inputs.compiler == 'gcc12') }}
     shell: bash
     run: |
       source env.sh
       brew install --force-bottle gcc@12
       brew link -f gcc@12
       echo "export CXX=g++" >> env.sh
       echo "MODE=compile" >> "$GITHUB_ENV"

   - name: Setup gcc 13
     if: ${{ startsWith(inputs.compiler, 'gcc13-') || (inputs.compiler == 'gcc13') }}
     shell: bash
     run: |
       source env.sh
       brew install --force-bottle gcc@13
       brew link -f gcc@13
       echo "export CXX=g++" >> env.sh
       echo "MODE=compile" >> "$GITHUB_ENV"

   - name: Setup clang 15
     if: ${{ startsWith(inputs.compiler, 'clang15-') || (inputs.compiler == 'clang15') }}
     shell: bash
     run: |
       source env.sh
       brew install --force-bottle llvm@15
       brew link -f llvm@15
       echo "export CXX=clang++" >> env.sh
       echo "MODE=compile" >> "$GITHUB_ENV"

   - name: Setup clang 16
     if: ${{ startsWith(inputs.compiler, 'clang16-') || (inputs.compiler == 'clang16') }}
     shell: bash
     run: |
       source env.sh
       brew install --force-bottle llvm@16
       brew link -f llvm@16
       echo "export CXX=clang++" >> env.sh
       echo "MODE=compile" >> "$GITHUB_ENV"

   - name: Setup clang 17
     if: ${{ startsWith(inputs.compiler, 'clang17-') || (inputs.compiler == 'clang17') }}
     shell: bash
     run: |
       source env.sh
       brew install --force-bottle llvm@17
       brew link -f llvm@17
       echo "export CXX=clang++" >> env.sh
       echo "MODE=compile" >> "$GITHUB_ENV"

   - name: Setup intel
     if: ${{ startsWith(inputs.compiler, 'intel-') || (inputs.compiler == 'intel') }}
     shell: bash
     run: |
       source env.sh
       wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
       sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
       rm GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
       sudo echo "deb https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
       sudo apt-get update -y
       sudo apt-get install -y intel-oneapi-compiler-dpcpp-cpp
       echo "source /opt/intel/oneapi/setvars.sh" >> env.sh
       sudo ln -fs $(icpx --print-prog-name=llvm-ar) /usr/bin/ar
       sudo ln -fs $(icpx --print-prog-name=lld) /usr/bin/ld
       sudo ln -fs $(icpx --print-prog-name=llvm-nm) /usr/bin/nm
       sudo ln -fs $(icpx --print-prog-name=llvm-ranlib) /usr/bin/ranlib
       echo "CC=icx" >> "${GITHUB_ENV}"
       echo "CXX=icpx" >> "${GITHUB_ENV}"


   - name: Setup c++17
     if: ${{ endsWith(inputs.compiler, '-cpp17') || contains(inputs.compiler, '-cpp17-') }}
     shell: bash
     run: |
       echo "export CXX_STANDARD=17" >> env.sh

   - name: Setup c++20
     if: ${{ endsWith(inputs.compiler, '-cpp20') || contains(inputs.compiler, '-cpp20-') }}
     shell: bash
     run: |
       echo "export CXX_STANDARD=20" >> env.sh

   - name: Setup c++23
     if: ${{ endsWith(inputs.compiler, '-cpp23') || contains(inputs.compiler, '-cpp23-') }}
     shell: bash
     run: |
       echo "export CXX_STANDARD=23" >> env.sh

   - name: Setup release
     if: ${{ endsWith(inputs.compiler, '-release') || contains(inputs.compiler, '-release-') }}
     shell: bash
     run: |
       echo "export BUILD_TYPE=Release" >> env.sh

   - name: Setup Debug
     if: ${{ endsWith(inputs.compiler, '-debug') || contains(inputs.compiler, '-debug-') }}
     shell: bash
     run: |
       echo "export BUILD_TYPE=Debug" >> env.sh
       echo 'export CMAKE_CXX_FLAGS="${CMAKE_CXX_FLAGS} -fno-omit-frame-pointer"' >> env.sh
       echo 'export CMAKE_C_FLAGS="${CMAKE_C_FLAGS} -fno-omit-frame-pointer"' >> env.sh

   - name: Setup Strict
     if: ${{ endsWith(inputs.compiler, '-strict') || contains(inputs.compiler, '-strict-') }}
     shell: bash
     run: |
       echo 'export CMAKE_CXX_FLAGS="${CMAKE_CXX_FLAGS} -Wall -Werror -Wpedantic -Wextra"' >> env.sh
       echo 'export CMAKE_C_FLAGS="${CMAKE_C_FLAGS} -Wall -Werror -Wpedantic -Wextra"' >> env.sh

   - name: Setup Sanitize Address
     if: ${{ endsWith(inputs.compiler, '-sanitize_address') || contains(inputs.compiler, '-sanitize_address-') }}
     shell: bash
     run: |
       echo 'export CMAKE_CXX_FLAGS="${CMAKE_CXX_FLAGS} -fsanitize=address"' >> env.sh
       echo 'export CMAKE_C_FLAGS="${CMAKE_C_FLAGS} -fsanitize=address"' >> env.sh

   - name: Setup Sanitize Undefined Behavior
     if: ${{ endsWith(inputs.compiler, '-sanitize_undefined') || contains(inputs.compiler, '-sanitize_undefined-') }}
     shell: bash
     run: |
       echo 'export CMAKE_CXX_FLAGS="${CMAKE_CXX_FLAGS} -fsanitize=undefined"' >> env.sh
       echo 'export CMAKE_C_FLAGS="${CMAKE_C_FLAGS} -fsanitize=undefined"' >> env.sh

   - name: Setup lcov
     if: ${{ endsWith(inputs.compiler, '-lcov') || contains(inputs.compiler, '-lcov-') }}
     shell: bash
     run: |
       source env.sh
       sudo apt-get install lcov
       lcov --version
       echo "export BUILD_TYPE=Debug" >> env.sh
       echo "export CMAKE_CXX_FLAGS=\"${CMAKE_CXX_FLAGS} --coverage\"" >> env.sh
       echo "export CMAKE_C_FLAGS=\"${CMAKE_C_FLAGS} --coverage\"" >> env.sh
   - name: cpm_version_check
     if: ${{ inputs.compiler == 'cpm_version_check' }}
     shell: bash
     run: |
       source env.sh
       if [ "${MODE}" == "unknown" ]; then
         echo "MODE=compile" >> "$GITHUB_ENV"
       fi

       cd ./repo
       mkdir cpm_check_version
       echo '#!/usr/bin/env bash

         name=${1:-}
         path=${2:-}
         version=${3:-}

         [ -z "${name}" ] &&        # no name given
         [ -z "${path}" ] &&        # no path given
         [ -z "${version}" ] &&     # no version given
         [ "${version}" == "0" ] && # version 0, means no version
         [ $(echo "${version}" | wc -c) -eq 40 ] && # full hash
             exit 0

         cd $path
         git fetch origin '"'"'refs/tags/*:refs/tags/*'"'"'
         newestVersion=$(git tag | cat - <(echo ${version}) | sed "s/^v//" | sort -V -r | head -n 1)

         if [ "${newestVersion}" == "${version}" ] \
             || [ v"${newsetVersion}" == "${version}" ]; then
             exit 0;
         fi

         # does newest Version has a leading "v"?, then add it
         if [ $(git tag | grep v${newestVersion} | wc -l) -eq 1 ]; then
             newestVersion=v${newestVersion}
         fi

         echo "ERROR: Newer version of \"${name}\" (${version} -> ${newestVersion}) available"
         exit 1
       ' | sed 's/^  //' > cpm_check_version/isNewestVersion.sh
       chmod +x cpm_check_version/isNewestVersion.sh
       echo 'cmake_minimum_required (VERSION 3.14)
         project("CPM_CHECK_VERSION")

         add_subdirectory(.. cpm_check_version)
         add_custom_target(CPM_CHECK_NEWER_PACKAGES)
         foreach(package ${CPM_PACKAGES})
             add_custom_target(CPM_CHECK_NEWER_PACKAGES_${package}
                 COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/isNewestVersion.sh
                               ${package}
                               ${CPM_PACKAGE_${package}_SOURCE_DIR}
                               ${CPM_PACKAGE_${package}_VERSION}
             )
             add_dependencies(CPM_CHECK_NEWER_PACKAGES CPM_CHECK_NEWER_PACKAGES_${package})
         endforeach()
       ' | sed 's/^  //' > cpm_check_version/CMakeLists.txt
       mkdir build-cpm_check_version
       cd $_
       cmake ../cpm_check_version
       make CPM_CHECK_NEWER_PACKAGES

   - name: REUSE Compliance Check
     if: ${{ inputs.compiler == 'spdx_license_lint' }}
     uses: fsfe/reuse-action@v2
     with:
       args: --suppress-deprecation lint

   - name: Tool versions
     if: env.MODE == 'compile'
     shell: bash
     run: |
       source env.sh
       env cmake --version
       env ${CXX} --version
   - name: Configure tests
     if: env.MODE == 'compile'
     shell: bash
     run: |
       source env.sh
       mkdir -p repo/build && cd $_
       cmake .. -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DCMAKE_CXX_STANDARD=${CXX_STANDARD} ${{ inputs.cmake_flags }} -DCMAKE_CXX_FLAGS="${CMAKE_CXX_FLAGS:-}" -DCMAKE_C_FLAGS="${CMAKE_C_FLAGS:-}"
   - name: Build tests
     if: env.MODE == 'compile'
     shell: bash
     run: |
       source env.sh
       cd repo/build
       make -k -j ${{ inputs.threads }}
   - name: Generate base coverage
     if: ${{ endsWith(inputs.compiler, '-lcov') || contains(inputs.compiler, '-lcov-') }}
     shell: bash
     run: |
       source env.sh
       cd repo/build
       lcov --help
       lcov -c -i --directory . --output coverage_base.info --gcov ${GCOV} --base-directory ..

   - name: Run tests
     if: env.MODE == 'compile'
     shell: bash
     run: |
       source env.sh
       cd repo/build
       ctest . -j ${{ inputs.threads }} --output-on-failure --timeout ${{ inputs.ctest_timeout }} || ctest . -j ${{ inputs.threads }} --output-on-failure --timeout ${{ inputs.ctest_timeout }} --rerun-failed
   - name: Generate Coverage report and upload
     if: ${{ endsWith(inputs.compiler, '-lcov') || contains(inputs.compiler, '-lcov-') }}
     shell: bash
     run: |
       source env.sh
       cd repo/build
       lcov -c --directory . --output coverage_test.info --gcov ${GCOV} --base-directory ..
       lcov -a coverage_base.info -a coverage_test.info -o coverage.info
       lcov --extract coverage.info '*/repo/*' --output-file coverage.info
       lcov --remove coverage.info --ignore-errors unused '*/repo/lib/*' --output-file coverage.info
       lcov --remove coverage.info --ignore-errors unused '*/repo/docs/*' --output-file coverage.info
       lcov --remove coverage.info --ignore-errors unused '*/repo/CMakeCCompilerId.c' --output-file coverage.info
       lcov --remove coverage.info --ignore-errors unused '*/repo/CMakeCXXCompilerId.cpp' --output-file coverage.info
       lcov --list coverage.info
       #gcovr -r ../ivio . --xml -o report.xml -e ../ivio/lib --exclude-noncode-lines --exclude-unreachable-branches --exclude-function-lines
       #gcovr -r ../ . --html --html-details --html-syntax-highlighting -o report.html -e ../lib
       curl -Os https://uploader.codecov.io/latest/linux/codecov
       chmod +x codecov
       if [ -n "${{ inputs.CODECOV_TOKEN }}" ]; then
         export CODECOV="-t ${{ inputs.CODECOV_TOKEN }}"
       fi
       ./codecov ${CODECOV:-} -f coverage.info -B ${{ github.ref_name }}
