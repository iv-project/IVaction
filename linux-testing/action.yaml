# SPDX-FileCopyrightText: 2006-2023, Knut Reinert & Freie Universität Berlin
# SPDX-FileCopyrightText: 2016-2023, Knut Reinert & MPI für molekulare Genetik
# SPDX-License-Identifier: CC0-1.0
name: "Linux"
description: "Standardized building for IV projects"

env:
  TZ: Europe/Berlin

inputs:
  compiler:
    description: "which compiler to use \"gcc12-cpp20-release\", \"clang16-cpp17-debug\", etc"
    required: true
  cmake_flags:
    description: "additional cmake flags"
    required: false
    default: ""
  threads:
    description: "number of threads to use"
    required: false
    default: 1
  CODECOV_TOKEN:
    description: "codecov secret"
    required: false
    default: ""

runs:
  using: 'composite'
  steps:
   - name: Checkout Repo
     uses: actions/checkout@v4
     with:
       path: repo
       submodules: recursive
       fetch-depth: 2 # Required by codecov
   - name: Install brew
     shell: bash
     run: |
       echo \"${GITHUB_ACTION}\" \"${GITHUB_REF}\" \"${GITHUB_BASE_REF}\" \"${GITHUB_RUN_NUMBER}\"
       NONINTERACTIVE=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
       eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
       echo 'eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"' > env.sh
       echo "Setup for " ${{ inputs.compiler }}
       echo "export CXX_STANDARD=20" >> env.sh
       echo "export BUILD_TYPE=Release" >> env.sh
       echo "export CMAKE_CXX_FLAGS=" >> env.sh
       echo "export CMAKE_C_FLAGS=" >> env.sh
       echo "export GCOV=gcov" >> env.sh
   - name: Install tools
     shell: bash
     run: |
       source env.sh
       sudo apt-get update -y
       sudo apt-get install -y build-essential
       brew upgrade

   - name: Setup gcc 11
     if: ${{ startsWith(inputs.compiler, 'gcc11-') || (inputs.compiler == 'gcc11') }}
     shell: bash
     run: |
       source env.sh
       brew install --force-bottle gcc@11
       brew link -f gcc@11
       echo "export CXX=g++" >> env.sh

   - name: Setup gcc 12
     if: ${{ startsWith(inputs.compiler, 'gcc12-') || (inputs.compiler == 'gcc12') }}
     shell: bash
     run: |
       source env.sh
       brew install --force-bottle gcc@12
       brew link -f gcc@12
       echo "export CXX=g++" >> env.sh

   - name: Setup gcc 13
     if: ${{ startsWith(inputs.compiler, 'gcc13-') || (inputs.compiler == 'gcc13') }}
     shell: bash
     run: |
       source env.sh
       brew install --force-bottle gcc@13
       brew link -f gcc@13
       echo "export CXX=g++" >> env.sh

   - name: Setup clang 15
     if: ${{ startsWith(inputs.compiler, 'clang15-') || (inputs.compiler == 'clang15') }}
     shell: bash
     run: |
       source env.sh
       brew install --force-bottle llvm@15
       brew link -f llvm@15
       echo "export CXX=clang++" >> env.sh

   - name: Setup clang 16
     if: ${{ startsWith(inputs.compiler, 'clang16-') || (inputs.compiler == 'clang16') }}
     shell: bash
     run: |
       source env.sh
       brew install --force-bottle llvm@16
       brew link -f llvm@16
       echo "export CXX=clang++" >> env.sh

   - name: Setup clang 17
     if: ${{ startsWith(inputs.compiler, 'clang17-') || (inputs.compiler == 'clang17') }}
     shell: bash
     run: |
       source env.sh
       brew install --force-bottle llvm@17
       brew link -f llvm@17
       echo "export CXX=clang++" >> env.sh

   - name: Setup c++17
     if: ${{ endsWith(inputs.compiler, '-cpp17') || contains(inputs.compiler, '-cpp17-') }}
     shell: bash
     run: |
       echo "export CXX_STANDARD=17" >> env.sh

   - name: Setup c++20
     if: ${{ endsWith(inputs.compiler, '-cpp20') || contains(inputs.compiler, '-cpp20-') }}
     shell: bash
     run: |
       echo "export CXX_STANDARD=20" >> env.sh

   - name: Setup c++23
     if: ${{ endsWith(inputs.compiler, '-cpp23') || contains(inputs.compiler, '-cpp23-') }}
     shell: bash
     run: |
       echo "export CXX_STANDARD=23" >> env.sh

   - name: Setup release
     if: ${{ endsWith(inputs.compiler, '-release') || contains(inputs.compiler, '-release-') }}
     shell: bash
     run: |
       echo "export BUILD_TYPE=Release" >> env.sh

   - name: Setup Debug
     if: ${{ endsWith(inputs.compiler, '-debug') || contains(inputs.compiler, '-debug-') }}
     shell: bash
     run: |
       echo "export BUILD_TYPE=Debug" >> env.sh
       echo 'export CMAKE_CXX_FLAGS="${CMAKE_CXX_FLAGS} -fno-omit-frame-pointer"' >> env.sh
       echo 'export CMAKE_C_FLAGS="${CMAKE_C_FLAGS} -fno-omit-frame-pointer"' >> env.sh

   - name: Setup Strict
     if: ${{ endsWith(inputs.compiler, '-strict') || contains(inputs.compiler, '-strict-') }}
     shell: bash
     run: |
       echo 'export CMAKE_CXX_FLAGS="${CMAKE_CXX_FLAGS} -Wall -Werror -Wpedantic -Wextra"' >> env.sh
       echo 'export CMAKE_C_FLAGS="${CMAKE_C_FLAGS} -Wall -Werror -Wpedantic -Wextra"' >> env.sh

   - name: Setup Sanitize Address
     if: ${{ endsWith(inputs.compiler, '-sanitize_address') || contains(inputs.compiler, '-sanitize_address-') }}
     shell: bash
     run: |
       echo 'export CMAKE_CXX_FLAGS="${CMAKE_CXX_FLAGS} -fsanitize=address"' >> env.sh
       echo 'export CMAKE_C_FLAGS="${CMAKE_C_FLAGS} -fsanitize=address"' >> env.sh

   - name: Setup Sanitize Undefined Behavior
     if: ${{ endsWith(inputs.compiler, '-sanitize_undefined') || contains(inputs.compiler, '-sanitize_undefined-') }}
     shell: bash
     run: |
       echo 'export CMAKE_CXX_FLAGS="${CMAKE_CXX_FLAGS} -fsanitize=undefined"' >> env.sh
       echo 'export CMAKE_C_FLAGS="${CMAKE_C_FLAGS} -fsanitize=undefined"' >> env.sh

   - name: Setup lcov
     if: ${{ endsWith(inputs.compiler, '-lcov') || contains(inputs.compiler, '-lcov-') }}
     shell: bash
     run: |
       source env.sh
       sudo apt-get install lcov
       lcov --version
       echo "export BUILD_TYPE=Debug" >> env.sh
       echo "export CMAKE_CXX_FLAGS=\"${CMAKE_CXX_FLAGS} --coverage\"" >> env.sh
       echo "export CMAKE_C_FLAGS=\"${CMAKE_C_FLAGS} --coverage\"" >> env.sh

   - name: Tool versions
     shell: bash
     run: |
       source env.sh
       env cmake --version
       env ${CXX} --version
   - name: Configure tests
     shell: bash
     run: |
       source env.sh
       mkdir -p repo/build && cd $_
       cmake .. -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DCMAKE_CXX_STANDARD=${CXX_STANDARD} ${{ inputs.cmake_flags }} -DCMAKE_CXX_FLAGS="${CMAKE_CXX_FLAGS:-}" -DCMAKE_C_FLAGS="${CMAKE_C_FLAGS:-}"
   - name: Build tests
     shell: bash
     run: |
       source env.sh
       cd repo/build
       make -k -j ${{ inputs.threads }}
   - name: Generate base coverage
     shell: bash
     if: ${{ endsWith(inputs.compiler, '-lcov') || contains(inputs.compiler, '-lcov-') }}
     run: |
       source env.sh
       cd repo/build
       lcov --help
       lcov -c -i --directory . --output coverage_base.info --gcov ${GCOV} --base-directory ..

   - name: Run tests
     shell: bash
     run: |
       source env.sh
       cd repo/build
       ctest . -j ${{ inputs.threads }} --output-on-failure --timeout 240 || ctest . -j ${{ inputs.threads }} --output-on-failure --timeout 240 --rerun-failed
   - name: Generate Coverage report and upload
     shell: bash
     if: ${{ endsWith(inputs.compiler, '-lcov') || contains(inputs.compiler, '-lcov-') }}
     run: |
       source env.sh
       cd repo/build
       lcov -c --directory . --output coverage_test.info --gcov ${GCOV} --base-directory ..
       lcov -a coverage_base.info -a coverage_test.info -o coverage.info
       lcov --extract coverage.info '*/repo/*' --output-file coverage.info
       lcov --remove coverage.info --ignore-errors unused '*/repo/lib/*' --output-file coverage.info
       lcov --remove coverage.info --ignore-errors unused '*/repo/docs/*' --output-file coverage.info
       lcov --remove coverage.info --ignore-errors unused '*/repo/CMakeCCompilerId.c' --output-file coverage.info
       lcov --remove coverage.info --ignore-errors unused '*/repo/CMakeCXXCompilerId.cpp' --output-file coverage.info
       lcov --list coverage.info
       #gcovr -r ../ivio . --xml -o report.xml -e ../ivio/lib --exclude-noncode-lines --exclude-unreachable-branches --exclude-function-lines
       #gcovr -r ../ . --html --html-details --html-syntax-highlighting -o report.html -e ../lib
       curl -Os https://uploader.codecov.io/latest/linux/codecov
       chmod +x codecov
       if [ -n "${{ inputs.CODECOV_TOKEN }}" ]; then
         export CODECOV="-t ${{ inputs.CODECOV_TOKEN }}"
       fi
       ./codecov ${CODECOV:-} -f coverage.info -B ${{ github.ref_name }}
