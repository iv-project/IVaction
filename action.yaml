# SPDX-FileCopyrightText: 2006-2023, Knut Reinert & Freie Universität Berlin
# SPDX-FileCopyrightText: 2016-2023, Knut Reinert & MPI für molekulare Genetik
# SPDX-License-Identifier: CC0-1.0
description: "Standardized building for IV projects"

inputs:
  compiler:
    description: "which compiler to use \"gcc12-cpp20-release\", \"clang16-cpp17-debug\", etc"
    required: true
  cmake_flags:
    description: "additional cmake flags"
    required: false
    default: ""
  threads:
    description: "number of threads to use"
    required: false
    default: 1
  codecov_token:
    description: "codecov secret"
    required: false
    default: ""
  ctest_timeout:
    description: "ctest timeout value in seconds"
    required: false
    default: 7200

runs:
  using: 'composite'
  steps:
  - name: Checkout Repo
    uses: actions/checkout@v4
    with:
      path: repo
      submodules: recursive
  - name: Initialize environment
    shell: bash
    run: |
       echo \"${GITHUB_ACTION}\" \"${GITHUB_REF}\" \"${GITHUB_BASE_REF}\" \"${GITHUB_RUN_NUMBER}\"
       echo "Setup for " ${{ inputs.compiler }}
       echo "export CXX_STANDARD=20" > env.sh
       echo "export BUILD_TYPE=Release" >> env.sh
       echo "export CMAKE_CXX_FLAGS=" >> env.sh
       echo "export CMAKE_C_FLAGS=" >> env.sh
       echo "export GCOV=gcov" >> env.sh
       echo "MODE=unknown" >> "$GITHUB_ENV"

  - name: Install tools (Linux)
    if: runner.os == 'Linux'
    shell: bash
    run: |
      source env.sh
      NONINTERACTIVE=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
      eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
      echo 'eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"' >> env.sh
      sudo apt-get update -y
      sudo apt-get install -y build-essential
      brew upgrade

  - name: Install tools (macOS)
    if: runner.os == 'macOS'
    shell: bash
    run: |
       source env.sh
       echo 'eval "$(brew shellenv)"' >> env.sh
       brew update-reset
       brew install --force-bottle --overwrite cmake pkg-config bash

  - name: Setup gcc 11 (Linux, macOS)
    if: (runner.os == 'Linux' || runner.os == 'macOS') && (startsWith(inputs.compiler, 'gcc11-') || (inputs.compiler == 'gcc11'))
    shell: bash
    run: |
      source env.sh
      brew install --force-bottle gcc@11
      brew link -f gcc@11
      echo "export CXX=g++" >> env.sh
      test "$RUNNER_OS" == "macOS" && echo "export CXX=g++-11" >> env.sh
      echo "MODE=compile" >> "$GITHUB_ENV"

  - name: Setup gcc 12 (Linux, macOS)
    if: (runner.os == 'Linux' || runner.os == 'macOS') && (startsWith(inputs.compiler, 'gcc12-') || (inputs.compiler == 'gcc12'))
    shell: bash
    run: |
      source env.sh
      brew install --force-bottle gcc@12
      brew link -f gcc@12
      echo "export CXX=g++" >> env.sh
      test "$RUNNER_OS" == "macOS" && echo "export CXX=g++-12" >> env.sh
      echo "MODE=compile" >> "$GITHUB_ENV"

  - name: Setup gcc 13 (Linux, macOS)
    if: (runner.os == 'Linux' || runner.os == 'macOS') && (startsWith(inputs.compiler, 'gcc13-') || (inputs.compiler == 'gcc13'))
    shell: bash
    run: |
      source env.sh
      brew install --force-bottle gcc@13
      brew link -f gcc@13
      echo "export CXX=g++" >> env.sh
      test "$RUNNER_OS" == "macOS" && echo "export CXX=g++-13" >> env.sh
      echo "MODE=compile" >> "$GITHUB_ENV"

  - name: Setup clang 15 (Linux, macOS)
    if: (runner.os == 'Linux' || runner.os == 'macOS') && (startsWith(inputs.compiler, 'clang15-') || (inputs.compiler == 'clang15'))
    shell: bash
    run: |
      source env.sh
      brew install --force-bottle llvm@15
      brew link -f llvm@15
      echo "export CXX=clang++" >> env.sh
      INSTALL_PREFIX=$(brew --prefix llvm@15)
      echo "export PATH=\"${INSTALL_PREFIX}/bin:$PATH\"" >> env.sh
      echo "export LDFLAGS=\"-L${INSTALL_PREFIX}/lib/c++ -Wl,-rpath,${INSTALL_PREFIX}/lib/c++\"" >> env.sh
      echo "MODE=compile" >> "$GITHUB_ENV"

  - name: Setup clang 16 (Linux, macOS)
    if: (runner.os == 'Linux' || runner.os == 'macOS') && (startsWith(inputs.compiler, 'clang16-') || (inputs.compiler == 'clang16'))
    shell: bash
    run: |
      source env.sh
      brew install --force-bottle llvm@16
      brew link -f llvm@16
      echo "export CXX=clang++" >> env.sh
      INSTALL_PREFIX=$(brew --prefix llvm@16)
      echo "export PATH=\"${INSTALL_PREFIX}/bin:$PATH\"" >> env.sh
      echo "export LDFLAGS=\"-L${INSTALL_PREFIX}/lib/c++ -Wl,-rpath,${INSTALL_PREFIX}/lib/c++\"" >> env.sh
      echo "MODE=compile" >> "$GITHUB_ENV"

  - name: Setup clang 17 (Linux, macOS)
    if: (runner.os == 'Linux' || runner.os == 'macOS') && (startsWith(inputs.compiler, 'clang17-') || (inputs.compiler == 'clang17'))
    shell: bash
    run: |
      source env.sh
      brew install --force-bottle llvm@17
      brew link -f llvm@17
      echo "export CXX=clang++" >> env.sh
      INSTALL_PREFIX=$(brew --prefix llvm@17)
      echo "export PATH=\"${INSTALL_PREFIX}/bin:$PATH\"" >> env.sh
      echo "export LDFLAGS=\"-L${INSTALL_PREFIX}/lib/c++ -Wl,-rpath,${INSTALL_PREFIX}/lib/c++\"" >> env.sh
      echo "MODE=compile" >> "$GITHUB_ENV"

  - name: Setup intel (Linux)
    if: (runner.os == 'Linux') && (startsWith(inputs.compiler, 'intel-') || (inputs.compiler == 'intel'))
    shell: bash
    run: |
      source env.sh
      wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
      sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
      rm GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
      sudo echo "deb https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
      sudo apt-get update -y
      sudo apt-get install -y intel-oneapi-compiler-dpcpp-cpp
      echo "source /opt/intel/oneapi/setvars.sh" >> env.sh
      sudo ln -fs $(icpx --print-prog-name=llvm-ar) /usr/bin/ar
      sudo ln -fs $(icpx --print-prog-name=lld) /usr/bin/ld
      sudo ln -fs $(icpx --print-prog-name=llvm-nm) /usr/bin/nm
      sudo ln -fs $(icpx --print-prog-name=llvm-ranlib) /usr/bin/ranlib
      echo "CC=icx" >> "${GITHUB_ENV}"
      echo "CXX=icpx" >> "${GITHUB_ENV}"
      echo "MODE=compile" >> "$GITHUB_ENV"


  - name: Setup c++17
    if: ${{ endsWith(inputs.compiler, '-cpp17') || contains(inputs.compiler, '-cpp17-') }}
    shell: bash
    run: |
      echo "export CXX_STANDARD=17" >> env.sh

  - name: Setup c++20
    if: ${{ endsWith(inputs.compiler, '-cpp20') || contains(inputs.compiler, '-cpp20-') }}
    shell: bash
    run: |
      echo "export CXX_STANDARD=20" >> env.sh

  - name: Setup c++23
    if: ${{ endsWith(inputs.compiler, '-cpp23') || contains(inputs.compiler, '-cpp23-') }}
    shell: bash
    run: |
      echo "export CXX_STANDARD=23" >> env.sh


  - name: Setup release
    if: ${{ endsWith(inputs.compiler, '-release') || contains(inputs.compiler, '-release-') }}
    shell: bash
    run: |
      echo "export BUILD_TYPE=Release" >> env.sh

  - name: Setup Debug
    if: endsWith(inputs.compiler, '-debug') || contains(inputs.compiler, '-debug-')
    shell: bash
    run: |
      echo "export BUILD_TYPE=Debug" >> env.sh
      if [ "${RUNNER_OS}" != "Windows" ]; then
        echo 'export CMAKE_CXX_FLAGS="${CMAKE_CXX_FLAGS} -fno-omit-frame-pointer"' >> env.sh
        echo 'export CMAKE_C_FLAGS="${CMAKE_C_FLAGS} -fno-omit-frame-pointer"' >> env.sh
      fi

  - name: Setup Strict (Linux, macOS)
    if: (runner.os == 'Linux' || runner.os == 'macOS') && (endsWith(inputs.compiler, '-strict') || contains(inputs.compiler, '-strict-'))
    shell: bash
    run: |
      echo 'export CMAKE_CXX_FLAGS="${CMAKE_CXX_FLAGS} -Wall -Werror -Wpedantic -Wextra"' >> env.sh
      echo 'export CMAKE_C_FLAGS="${CMAKE_C_FLAGS} -Wall -Werror -Wpedantic -Wextra"' >> env.sh

  - name: Setup Sanitize Address (Linux)
    if: runner.os == 'Linux' && (endsWith(inputs.compiler, '-sanitize_address') || contains(inputs.compiler, '-sanitize_address-'))
    shell: bash
    run: |
      echo 'export CMAKE_CXX_FLAGS="${CMAKE_CXX_FLAGS} -fsanitize=address"' >> env.sh
      echo 'export CMAKE_C_FLAGS="${CMAKE_C_FLAGS} -fsanitize=address"' >> env.sh

  - name: Setup Sanitize Undefined Behavior (Linux)
    if: runner.os == 'Linux' && (endsWith(inputs.compiler, '-sanitize_undefined') || contains(inputs.compiler, '-sanitize_undefined-'))
    shell: bash
    run: |
      echo 'export CMAKE_CXX_FLAGS="${CMAKE_CXX_FLAGS} -fsanitize=undefined"' >> env.sh
      echo 'export CMAKE_C_FLAGS="${CMAKE_C_FLAGS} -fsanitize=undefined"' >> env.sh

  - name: Setup lcov (Linux)
    if: runner.os == 'Linux' && (endsWith(inputs.compiler, '-lcov') || contains(inputs.compiler, '-lcov-'))
    shell: bash
    run: |
      source env.sh
      sudo apt-get install lcov
      lcov --version
      echo "export BUILD_TYPE=Debug" >> env.sh
      echo "export CMAKE_CXX_FLAGS=\"${CMAKE_CXX_FLAGS} --coverage\"" >> env.sh
      echo "export CMAKE_C_FLAGS=\"${CMAKE_C_FLAGS} --coverage\"" >> env.sh
  - name: cpm_version_check (Linux)
    if: runner.os == 'Linux' && inputs.compiler == 'cpm_version_check'
    shell: bash
    run: |
      source env.sh
      cp -r "${{ github.action_path }}"/cpm_check_version .
      cd cpm_check_version
      cmake .
      make CPM_CHECK_NEWER_PACKAGES

  - name: REUSE Compliance Check
    if: ${{ inputs.compiler == 'spdx_license_lint' }}
    uses: fsfe/reuse-action@v2
    with:
      args: --suppress-deprecation lint


  - name: Tool versions (Linux, macOS)
    if: (runner.os == 'Linux' || runner.os == 'macOS') && env.MODE == 'compile'
    shell: bash
    run: |
      source env.sh
      cmake --version
      ${CXX} --version
  - name: Configure tests (Linux, macOS)
    if: (runner.os == 'Linux' || runner.os == 'macOS') && env.MODE == 'compile'
    shell: bash
    run: |
      source env.sh
      mkdir -p repo/build && cd $_
      cmake .. -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DCMAKE_CXX_STANDARD=${CXX_STANDARD} ${{ inputs.cmake_flags }} -DCMAKE_CXX_FLAGS="${CMAKE_CXX_FLAGS:-}" -DCMAKE_C_FLAGS="${CMAKE_C_FLAGS:-}"
  - name: Build tests (Linux, macOS)
    if: (runner.os == 'Linux' || runner.os == 'macOS') && env.MODE == 'compile'
    shell: bash
    run: |
      source env.sh
      cd repo/build
      make -k -j ${{ inputs.threads }} VERBOSE=1
  - name: Generate base coverage
    if: runner.os == 'Linux' && (endsWith(inputs.compiler, '-lcov') || contains(inputs.compiler, '-lcov-'))
    shell: bash
    run: |
      source env.sh
      cd repo/build
      lcov --help
      lcov -c -i --directory . --output coverage_base.info --gcov ${GCOV} --base-directory ..

  - name: Run tests (Linux, macOS)
    if: (runner.os == 'Linux' || runner.os == 'macOS') && env.MODE == 'compile'
    shell: bash
    run: |
      source env.sh
      cd repo/build
      ctest . -j ${{ inputs.threads }} --output-on-failure --timeout ${{ inputs.ctest_timeout }} || ctest . -j ${{ inputs.threads }} --output-on-failure --timeout ${{ inputs.ctest_timeout }} --rerun-failed
  - name: Generate Coverage report and upload (Linux)
    if: runner.os == 'Linux' && (endsWith(inputs.compiler, '-lcov') || contains(inputs.compiler, '-lcov-'))
    shell: bash
    run: |
      source env.sh
      cd repo/build
      lcov -c --directory . --output coverage_test.info --gcov ${GCOV} --base-directory ..
      lcov -a coverage_base.info -a coverage_test.info -o coverage.info
      lcov --extract coverage.info '*/repo/*' --output-file coverage.info
      lcov --remove coverage.info --ignore-errors unused '*/repo/lib/*' --output-file coverage.info
      lcov --remove coverage.info --ignore-errors unused '*/repo/docs/*' --output-file coverage.info
      lcov --remove coverage.info --ignore-errors unused '*/repo/CMakeCCompilerId.c' --output-file coverage.info
      lcov --remove coverage.info --ignore-errors unused '*/repo/CMakeCXXCompilerId.cpp' --output-file coverage.info
      lcov --list coverage.info
      #gcovr -r ../ivio . --xml -o report.xml -e ../ivio/lib --exclude-noncode-lines --exclude-unreachable-branches --exclude-function-lines
      #gcovr -r ../ . --html --html-details --html-syntax-highlighting -o report.html -e ../lib
      curl -Os https://uploader.codecov.io/latest/linux/codecov
      chmod +x codecov
      if [ -n "${{ inputs.codecov_token }}" ]; then
        export CODECOV="-t ${{ inputs.codecov_token }}"
      fi
      ./codecov ${CODECOV:-} -f coverage.info -B ${{ github.ref_name }}
  - name: Load MSVC Tools (Windows)
    uses: ilammy/msvc-dev-cmd@v1
    if: (runner.os == 'Windows')

  - name: Build something requiring CL.EXE (Windows)
    if: (runner.os == 'Windows')
    shell: bash
    run: |
      mkdir -p repo/build && cd $_
      cmake .. -G "NMake Makefiles" -DCMAKE_TOOLCHAIN_FILE="C:/vcpkg/scripts/buildsystems/vcpkg.cmake" -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DCMAKE_CXX_STANDARD=${CXX_STANDARD} ${{ inputs.cmake_flags }} -DCMAKE_CXX_FLAGS="${CMAKE_CXX_FLAGS:-}" -DCMAKE_C_FLAGS="${CMAKE_C_FLAGS:-}"
      nmake VERBOSE=1
  - name: Run tests (Windows)
    if: (runner.os == 'Windows')
    shell: bash
    run: |
      cd repo/build
      ctest . -j ${{ inputs.threads }} --output-on-failure --timeout ${{ inputs.ctest_timeout }}
